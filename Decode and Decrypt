using System;
using System.IO;

namespace Decode_and_Decrypt
{
    class StartUp

    {
        //static void MockInput()
        //{
        //    var reader = new StringReader("ABBAA6BA7");
        //    Console.SetIn(reader);
        //}

        static string GetCypherLength(string encrypted)
        {
            var result = "";

            for (var i = encrypted.Length - 1; char.IsDigit (encrypted[i]) ; i--)
            {
                result = encrypted[i] + result;
            }

            return result;
        }

        static string GetEncodedPart(string message, int cypherLength)
        {
            var length = message.Length - cypherLength;
            return message.Substring(0, length);
        }

        static string GetCypher(string encryptedWithCypher, int cypherLength)
        {
            var start = encryptedWithCypher.Length - cypherLength;
            return encryptedWithCypher.Substring(start);
        }

        static string GetEncryptedPart(string encryptedWithCypher, int cypherLength)
        {
            var length = encryptedWithCypher.Length - cypherLength;
            return encryptedWithCypher.Substring(0, length);
        }
    
        static string Decode(string encoded)
        {
            var result = "";

            for (var i = 0; i < encoded.Length; i++)
            {
                var currentNumber = "";

                while (char.IsDigit(encoded[i]))
                {
                    currentNumber += encoded[i];
                    i++;
                }

                var symbolToRepeat = encoded[i];

                if (string.IsNullOrEmpty(currentNumber))
                {
                    currentNumber = "1";
                }

                result += new String(symbolToRepeat, int.Parse(currentNumber));
            }

            return result;
        }

        static int CodeOf(char s)
        {
            return s - 'A';
        }

        static char CharOf(int code)
        {
            return (char)(code + 'A');
        }
          
        static string Decrypt(string encrypted, string cypher)
        {
            var result = encrypted.ToCharArray();
            var length = Math.Max(encrypted.Length, cypher.Length);

            for (var i = 0; i < length; i++)
            {
                var code1 = CodeOf(result[i % result.Length]);
                var code2 = CodeOf(cypher[i % cypher.Length]);

                var xor = code1 ^ code2;

                result[i % result.Length] = CharOf(xor);
            }

            return string.Join("", result);
        }

        //static void InfiniteArrayPrint()
        //{
        //    string word = "abcde";
        //    string word2 = "dfgsdfgsdfgdsf";

        //    var i = 0;

        //    while (true)
        //    {
        //        Console.WriteLine(word[i % word.Length]);
        //        Console.WriteLine(word2[i % word2.Length]);


        //        // i = (i + 1) % word.Length;
        //    }
        //}

        static void Main()
        {
          //  MockInput();
            var encryptedMessage = Console.ReadLine();
            var cypherLengthString = GetCypherLength(encryptedMessage);
            var encodedPart = GetEncodedPart(encryptedMessage, cypherLengthString.Length);

            var decoded = Decode(encodedPart);

            var cypherLength = int.Parse(cypherLengthString);
            var encryptedPart = GetEncodedPart(decoded, cypherLength);
            var cypher = GetCypher(decoded, cypherLength);



            var decrypted = Decrypt(encryptedPart, cypher);
        }
    }
}
